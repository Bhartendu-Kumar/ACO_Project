

% \begin{equation}
% \hat{x} = argmin_x { || Ax - b ||^2 + \lambda ||x||_1 } 
% \end{equation}

% In the paper the Degradation Model, 
%i.e. the matrix $\mathbf{A}$ is chosen as $ \mathbf{A} = \mathbf{R} \mathbf{W}$ where $\mathbf{R}$ 
%is the blurring matrix and $\mathbf{W}$ contains a wavelet basis
% (i.e., multiplying by $\mathbf{W}$ corresponds to performing inverse wavelet transform).
% \\
% We assumed the degradation model as :
% \[
% b = Ax = RW x = R x

% \]
% because we asssume $\mathbf{A} = \mathbf{R} \mathbf{W}$, the matrix corresponding to wavelet transform is $\mathbf{W} = \mathbf{I}$ in our assumed case. 
% \\
%



clear; close all;
%augment path to use the folders of the project
addpath(genpath('.'));





%code to load the image to a a variable

initial_image_read = im2double(imread('test_42.JPEG'));
% load x_2d ;
% initial_image_read  = x_2d;

%convert to grayscale
image_as_matrix =  im2gray( initial_image_read);



%below are some trivial images, generated by hand to see the performance on the algorithms 
%skip this image definition part
% image_as_matrix = initial_image_read(1:100,1:100); % original image (20x20)

% image_as_matrix = initial_image_read;

% image_as_matrix = [ 0,0,0,0,0,0,0,0,0,0 , 0,0,0,0,0,0,0,0,0,1 ;
%     0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,1,1;
%     0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,1,1;
%     0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,1,1,1,1;
%     0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,1,1,1,1,1;
%     0,0,0,0,0,0,0,0,0,0, 0,0,0,0,1,1,1,1,1,1;
%     0,0,0,0,0,0,0,0,0,0, 0,0,0,1,1,1,1,1,1,1;
%     0,0,0,0,0,0,0,0,0,0, 0,0,1,1,1,1,1,1,1,1;
%     0,0,0,0,0,0,0,0,0,0, 0,0,1,1,1,1,1,1,1,1;
%     0,0,0,0,0,0,0,0,0,0, 0,1,1,1,1,1,1,1,1,1;
%     0,0,0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,1,1;
%     0,0,0,0,0,0,0,0,0,1, 1,1,1,1,1,1,1,1,1,1;
%     0,0,0,0,0,0,0,0,0,1, 1,1,1,1,1,1,1,1,1,1;
%     0,0,0,0,0,0,0,0,1,1, 1,1,1,1,1,1,1,1,1,1;
%     0,0,0,0,0,0,0,1,1,1, 1,1,1,1,1,1,1,1,1,1;
%     0,0,0,0,0,0,1,1,1,1, 1,1,1,1,1,1,1,1,1,1;
%      0,0,0,0,0,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1;
%       0,0,0,0,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1;
%        0,0,0,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1;
%         0,0,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1;
%          0,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1;
%          1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1;]
%     
%     
% image_as_matrix = [ 0,0,0,0,0,0,0,0,0,0 , 0,0,0,0,0,0,0,0,0,1 ;
%     0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,1,1;
%     0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,1,1,1;
%     0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,0,1,1,1,1;
%     0,0,0,0,0,0,0,0,0,0, 0,0,0,0,0,1,1,1,1,1;
%     0,0,0,0,0,0,0,0,0,0, 0,0,0,0,1,1,1,1,1,1;
%     0,0,0,0,0,0,0,0,0,0, 0,0,0,1,1,1,1,1,1,1;
%     0,0,0,0,0,0,0,0,0,0, 0,0,1,1,1,1,1,1,1,1;
%     0,0,0,0,0,0,0,0,0,0, 0,0,1,1,1,1,1,1,1,1;
%     0,0,0,0,0,0,0,0,0,0, 0,1,1,1,1,1,1,1,1,1;
%     0,0,0,0,0,0,0,0,0,0, 1,1,1,1,1,1,1,1,1,1;
%     0,0,0,0,0,0,0,0,0,1, 1,1,1,1,1,1,1,0,0,1;
%     0,0,0,0,0,0,0,0,0,1, 1,1,1,1,1,1,1,0,0,1;
%     0,0,0,0,0,0,0,0,1,1, 1,1,0,0,1,1,1,0,0,1;
%     0,0,0,0,0,0,0,1,1,1, 1,1,0,0,1,1,1,0,0,1;
%     0,0,0,0,0,0,1,1,1,1, 1,1,0,0,1,1,1,0,0,1;
%      0,0,0,0,0,1,1,1,1,1, 1,1,0,1,1,1,1,1,1,1;
%       0,0,0,0,1,1,1,1,1,1, 1,0,1,1,1,1,1,1,1,1;
%        0,0,0,1,1,1,1,1,1,1, 0,0,0,1,1,1,1,1,1,1;
%         0,0,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1;
%          0,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1;
%          1,1,1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,1,1;]
%     

% image_as_matrix = zeros(20);
% image_as_matrix(10,10) = 1;
% image_as_matrix(15,10) = 1;
% image_as_matrix(10,15) = 1;
% image_as_matrix(10,11) = 1;
% image_as_matrix(11,10) = 1;
%     


    


%% blur kernel & laplacian kernel
% The image went through a Gaussian blur of size 9 ï¿½ 9
% and standard deviation 4 (applied by the MATLAB function fspecial)
blur_filter_as_matrix = fspecial('gaussian',[9,9],4);


laplacian_filter_as_matrix = [0 0.25 0; 0.25 -1 0.25; 0 0.25 0]; % 2D Laplacian 
tic; 
[c,c_2d] = build_A_matrix_for_blur(image_as_matrix,laplacian_filter_as_matrix);
 toc;
%% create A matrix
tic; 
[A,A_matrix_two_dim] = build_A_matrix_for_blur(image_as_matrix,blur_filter_as_matrix);
 toc;



%NOW WE HAVE THE IMAGE IN A MATRIX FORM
 % vectorization of matrix-image to 1d vector
 x = image_as_matrix(:);


%% Starting applying the blur operator as a Matrix vector multiplication

%operating the Blur matrix to our image
b = A*x;                           
blurred_image_two_dim = reshape(b,size(image_as_matrix));    % reshape the blurred image to 2D matrix

%uncomment following line to add noise to the blurred image
% blurred_image_two_dim = imnoise(blurred_image_two_dim_b,'gaussian',0,0.001);  % add noise to the blurred image




% to change this figurer plotting manner 
figure('Position',[400,400,200,200]),imshow(image_as_matrix);title('original');caxis([0,1]);
figure('Position',[400,400,200,200]),imshow(blurred_image_two_dim);title('degraded');caxis([0,1]);



% we know the degraded image, the blur kernel as big matrix 
% we are solving for the unknown image, x





% initializing the parameters to be passed as arguments to the different Iterative Shrinkage-Thresholding Algorithms

% to use the objective function Least sqaure with L1 norm, use fun_obj = 1
fun_obj = 1 ; 
c_constrained_ls = c;
 argument_struct = building_calling_parameters(fun_obj,c_constrained_ls);


 %to initialize initial guess of x 
 x_initial = b;








%IMPLEMENTING ITERATIVE SHRINKAGE-THRESHOLDING ALGORITHM (ISTA)
fprintf('ISTA \n');
[image_after_ISTA , ISTA_cost_function_per_iter  , ISTA_RMSE_per_iter , ISTA_PSNR_per_iter] = ISTA(x,A,b,x_initial,argument_struct,0);

%rewriting the figure code
figure('Position',[400,400,200,200]),imshow(reshape(image_after_ISTA,size(image_as_matrix)));title('ISTA');caxis([0,1]);

% imshow(reshape(image_after_ISTA,size(image_as_matrix)));
% title('ISTA');

%plotting the PSNR after ISTA
fprintf('psnr: %.2f\n',PSNR_ratio(image_as_matrix,image_after_ISTA,1));



%%% FISTA
fprintf('FISTA \n');
[image_after_ISTA, FISTA_cost_function_per_iter  , FISTA_RMSE_per_iter , FISTA_PSNR_per_iter] = FISTA(x,A,b,x_initial,argument_struct,0);

%
figure('Position',[400,400,200,200]),imshow(reshape(image_after_ISTA,size(image_as_matrix)));title('FISTA');caxis([0,1]);
% imshow(reshape(image_after_ISTA,size(image_as_matrix)));
% title('FISTA');
%
%plotting the PSNR after FISTA
fprintf('psnr: %.2f\n',PSNR_ratio(image_as_matrix,image_after_ISTA,1));




%now plotting the graphs for the cost function vs iteration of both algorithms
figure('Position',[400,400,200,200]),plot(1:length(FISTA_cost_function_per_iter),FISTA_cost_function_per_iter,'r',1:length(ISTA_cost_function_per_iter),ISTA_cost_function_per_iter,'b');title('Cost Function vs Iteration');legend('FISTA','ISTA');

% now plot the graphs for the RMSE vs iteration of both algorithms
figure('Position',[400,400,200,200]),plot(1:length(FISTA_RMSE_per_iter),FISTA_RMSE_per_iter,'r',1:length(ISTA_RMSE_per_iter),ISTA_RMSE_per_iter,'b');title('RMSE vs Iteration');legend('FISTA','ISTA');

%now plot the graphs for the PSNR vs iteration of both algorithms
figure('Position',[400,400,300,200]),plot(1:length(FISTA_PSNR_per_iter),FISTA_PSNR_per_iter,'r',1:length(ISTA_PSNR_per_iter),ISTA_PSNR_per_iter,'b');title('PSNR vs Iteration');legend('FISTA','ISTA');

